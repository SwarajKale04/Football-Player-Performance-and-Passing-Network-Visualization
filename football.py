# -*- coding: utf-8 -*-
"""football.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/152VFFRDTuliFLlVtDREOXjBQQAPs-gFm
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
!pip install country_converter >nul 2>&1
import country_converter as coco
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from plotly.offline import init_notebook_mode
init_notebook_mode(connected=True)
import plotly.figure_factory as ff
import plotly.graph_objects as go
from wordcloud import WordCloud
import warnings
warnings.filterwarnings('ignore')
import nltk

# %matplotlib inline

df = pd.read_csv('attacking.csv')
df_attempts = pd.read_csv('attempts.csv')
df_defending = pd.read_csv('defending.csv')
df_disciplinary = pd.read_csv('disciplinary.csv')
df_distributon = pd.read_csv('distributon.csv')
df_goalkeeping = pd.read_csv('goalkeeping.csv')
df_goals = pd.read_csv('goals.csv')
df_key_stats = pd.read_csv('key_stats.csv')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import Normalize
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import urllib.request
from PIL import Image
import io

# %config HistoryManager.enabled = False



data = {
    "player_name": ["Manuel Neuer", "Virgil van Dijk", "Sergio Ramos", "Angelino", "Trent Alexander-Arnold",
                    "N'Golo Kanté", "Luka Modrić", "Kevin De Bruyne", "Hakim Ziyech", "Antoine Griezmann", "Karim Benzema"],
    "position": ["Goalkeeper", "Defender", "Defender", "Defender", "Defender",
                 "Midfielder", "Midfielder", "Midfielder", "Forward", "Forward", "Forward"],
    "dribbles": [5, 10, 15, 20, 25, 30, 25, 40, 45, 35, 50],
    "assists": [2, 5, 3, 8, 12, 6, 10, 15, 10, 12, 8],
    "photo_url": [
        "neuer.png",
        "djk.png",
        "ramos.png",
        "angelino.png",
        "arnold.png",
        "kante.png",
        "modric.png",
        "debruyne.png",
        "zyech.png",
        "griezman.png",
        "benzema1.png"
    ]
}
df = pd.DataFrame(data)


def assign_position(player_name):

    if player_name == "Manuel Neuer":
        return 5, 35
    elif player_name == "Virgil van Dijk":
        return 19, 30
    elif player_name == "Sergio Ramos":
        return 19, 40
    elif player_name == "Angelino":
        return 20, 55
    elif player_name == "Trent Alexander-Arnold":
        return 20, 15
    elif player_name == "N'Golo Kanté":
        return 40, 29
    elif player_name == "Luka Modrić":
        return 40, 41
    elif player_name == "Kevin De Bruyne":
        return 58, 35
    elif player_name == "Hakim Ziyech":
        return 75, 55
    elif player_name == "Antoine Griezmann":
        return 75, 15
    elif player_name == "Karim Benzema":
        return 85, 35
    return 50, 35

df["x"], df["y"] = zip(*df["player_name"].apply(assign_position))


def add_field_background(ax):
    file_path = "saha1.png"
    try:
        img = Image.open(file_path)
        img = np.array(img.convert('RGB'))
        ax.imshow(img, extent=[0, 100, 0, 70], aspect='auto', alpha=0.9)
    except Exception as e:
        print(f"Saha görseli yüklenemedi: {e}")
        # Yedek olarak çizgi tabanlı saha
        ax.add_patch(plt.Rectangle((0, 0), 100, 70, facecolor='forestgreen', edgecolor='white', lw=2))
        ax.plot([50, 50], [0, 70], 'w--', lw=2)
        ax.add_patch(plt.Rectangle((0, 20), 10, 30, facecolor='none', edgecolor='white', lw=2))
        ax.add_patch(plt.Rectangle((90, 20), 10, 30, facecolor='none', edgecolor='white', lw=2))
        ax.add_patch(plt.Circle((50, 35), 10, facecolor='none', edgecolor='white', lw=2))
    return ax


def add_player_photo(ax, x, y, photo_url, zoom=0.08):
    try:
        if photo_url.startswith("http"):
            with urllib.request.urlopen(photo_url) as response:
                img = Image.open(io.BytesIO(response.read()))
        else:
            img = Image.open(photo_url)
        img = img.convert('RGBA')
        imagebox = OffsetImage(img, zoom=zoom)
        ab = AnnotationBbox(imagebox, (x, y), frameon=False)
        ax.add_artist(ab)
    except Exception as e:
        print(f"Fotoğraf yüklenemedi: {photo_url}, hata: {e}")


plt.figure(figsize=(15, 10))
ax = plt.gca()
ax.set_xlim(0, 100)
ax.set_ylim(0, 70)
ax.axis('off')


add_field_background(ax)


norm = Normalize(vmin=df["dribbles"].min(), vmax=df["dribbles"].max())
cmap = plt.cm.Reds
scalar_map = plt.cm.ScalarMappable(norm=norm, cmap=cmap)

for i, row in df.iterrows():
    color = scalar_map.to_rgba(row["dribbles"])
    size = max(50, row["assists"] * 10)
    ax.scatter(row["x"], row["y"], s=size, color=color, alpha=0.8, edgecolors='k')
    add_player_photo(ax, row["x"], row["y"] + 3, row["photo_url"], zoom=0.08)
    ax.text(row["x"], row["y"] - 2, row["player_name"],
            ha='center', va='top', fontsize=8, fontweight='bold', color='white')
    ax.text(row["x"], row["y"] - 4, row["position"],
            ha='center', va='top', fontsize=6, color='lightgray')

cbar = plt.colorbar(scalar_map, ax=ax, orientation='horizontal', pad=0.05, shrink=0.5)
cbar.set_label("Dribbles", fontsize=10)
cbar.ax.tick_params(labelsize=8)


plt.title("Player Distribution on the Football Field\n(Colored According to Number of Dribbles)",
          fontsize=14, pad=20)
plt.tight_layout()
plt.savefig("halisaha_oyuncu_dagilimi.png", dpi=300, bbox_inches='tight', facecolor='white')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import Normalize
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import seaborn as sns
import urllib.request
from PIL import Image
import io
import plotly.express as px
import plotly.graph_objects as go


data = {
    "player_name": ["Manuel Neuer", "Virgil van Dijk", "Sergio Ramos", "Angelino", "Trent Alexander-Arnold",
                    "N'Golo Kanté", "Luka Modrić", "Kevin De Bruyne", "Hakim Ziyech", "Antoine Griezmann", "Karim Benzema"],
    "position": ["Goalkeeper", "Defender", "Defender", "Defender", "Defender",
                 "Midfielder", "Midfielder", "Midfielder", "Forward", "Forward", "Forward"],
    "dribbles": [5, 10, 15, 20, 25, 30, 25, 40, 45, 35, 50],
    "assists": [2, 5, 3, 8, 12, 6, 10, 15, 10, 12, 8],
    "photo_url": [
       "neuer.png",
        "djk.png",
        "ramos.png",
        "angelino.png",
        "arnold.png",
        "kante.png",
        "modric.png",
        "debruyne.png",
        "zyech.png",
        "griezman.png",
        "benzema1.png"
    ],
    "jersey_number": [1, 4, 4, 3, 66, 7, 10, 17, 22, 7, 9],
    "age": [39, 34, 39, 28, 27, 34, 37, 34, 32, 34, 37]
}
df = pd.DataFrame(data)


def assign_position(player_name):
    if player_name == "Manuel Neuer":
        return 5, 35
    elif player_name == "Virgil van Dijk":
        return 19, 30
    elif player_name == "Sergio Ramos":
        return 19, 40
    elif player_name == "Angelino":
        return 20, 55
    elif player_name == "Trent Alexander-Arnold":
        return 20, 15
    elif player_name == "N'Golo Kanté":
        return 40, 29
    elif player_name == "Luka Modrić":
        return 40, 41
    elif player_name == "Kevin De Bruyne":
        return 58, 35
    elif player_name == "Hakim Ziyech":
        return 75, 55
    elif player_name == "Antoine Griezmann":
        return 75, 15
    elif player_name == "Karim Benzema":
        return 85, 35
    return 50, 35

df["x"], df["y"] = zip(*df["player_name"].apply(assign_position))




def add_field_background(ax):
    file_path = "saha1.png"
    try:
        img = Image.open(file_path)
        img = np.array(img.convert('RGB'))
        ax.imshow(img, extent=[0, 100, 0, 70], aspect='auto', alpha=0.9)
    except Exception as e:
        print(f"Kaggle saha görseli yüklenemedi: {e}")
        url = "https://www.pngkit.com/png/detail/12-123974_football-field-png-football-field-top-view-png.png"
        try:
            with urllib.request.urlopen(url) as response:
                img = Image.open(io.BytesIO(response.read()))
            img = np.array(img.convert('RGB'))
            ax.imshow(img, extent=[0, 100, 0, 70], aspect='auto', alpha=0.9)
        except Exception as e2:
            print(f"URL saha görseli yüklenemedi: {e2}")
            ax.add_patch(plt.Rectangle((0, 0), 100, 70, facecolor='forestgreen', edgecolor='white', lw=2))
            ax.plot([50, 50], [0, 70], 'w--', lw=2)
            ax.add_patch(plt.Rectangle((0, 20), 10, 30, facecolor='none', edgecolor='white', lw=2))
            ax.add_patch(plt.Rectangle((90, 20), 10, 30, facecolor='none', edgecolor='white', lw=2))
            ax.add_patch(plt.Circle((50, 35), 10, facecolor='none', edgecolor='white', lw=2))
    return ax


def add_player_photo(ax, x, y, photo_url, zoom=0.08):
    try:
        if photo_url.startswith("http"):
            with urllib.request.urlopen(photo_url) as response:
                img = Image.open(io.BytesIO(response.read()))
        else:
            img = Image.open(photo_url)
        img = img.convert('RGBA')
        imagebox = OffsetImage(img, zoom=zoom)
        ab = AnnotationBbox(imagebox, (x, y), frameon=False)
        ax.add_artist(ab)
    except Exception as e:
        print(f"Fotoğraf yüklenemedi: {photo_url}, hata: {e}")


paslar = {
    ("Kevin De Bruyne", "Karim Benzema"): 10,
    ("Kevin De Bruyne", "Hakim Ziyech"): 8,
    ("Luka Modrić", "N'Golo Kanté"): 6,
    ("Hakim Ziyech", "Karim Benzema"): 5,
    ("Antoine Griezmann", "Karim Benzema"): 4,
    ("Angelino", "Antoine Griezmann"): 3,
    ("Trent Alexander-Arnold", "Hakim Ziyech"): 3,
    ("N'Golo Kanté", "Kevin De Bruyne"): 7
}


plt.figure(figsize=(15, 10))
ax = plt.gca()
ax.set_xlim(0, 100)
ax.set_ylim(0, 70)
ax.axis('off')


add_field_background(ax)

for _, row in df.iterrows():
    x = np.random.normal(row["x"], 5, 100)
    y = np.random.normal(row["y"], 5, 100)
    sns.kdeplot(x=x, y=y, ax=ax, cmap="YlOrRd", alpha=0.3, levels=5, thresh=0.1)


for (p1, p2), count in paslar.items():
    x1, y1 = df[df["player_name"] == p1][["x", "y"]].values[0]
    x2, y2 = df[df["player_name"] == p2][["x", "y"]].values[0]
    ax.plot([x1, x2], [y1, y2], 'b-', lw=count*0.3, alpha=0.5)


norm = Normalize(vmin=df["dribbles"].min(), vmax=df["dribbles"].max())
cmap = plt.cm.Reds
scalar_map = plt.cm.ScalarMappable(norm=norm, cmap=cmap)


for i, row in df.iterrows():
    color = scalar_map.to_rgba(row["dribbles"])
    size = max(50, row["assists"] * 10)
    ax.scatter(row["x"], row["y"], s=size, color=color, alpha=0.8, edgecolors='k')
    add_player_photo(ax, row["x"], row["y"] + 3, row["photo_url"], zoom=0.08)
    ax.text(row["x"], row["y"] - 2, f"{row['player_name']} ({row['jersey_number']})",
            ha='center', va='top', fontsize=8, fontweight='bold', color='white')
    ax.text(row["x"], row["y"] - 4, row["position"],
            ha='center', va='top', fontsize=6, color='lightgray')


cbar = plt.colorbar(scalar_map, ax=ax, orientation='horizontal', pad=0.05, shrink=0.5)
cbar.set_label("Dribbles", fontsize=10)
cbar.ax.tick_params(labelsize=8)


plt.title("Player Distribution on the Football Field\n(Passing Network, Heat Map and Jerseys)", fontsize=14, pad=20)
plt.tight_layout()
plt.savefig("halisaha_pas_isi_forma.png", dpi=300, bbox_inches='tight', facecolor='white')
plt.show()




saha_url = "https://www.pngkit.com/png/detail/12-123974_football-field-png-football-field-top-view-png.png"


fig = px.scatter(df, x="x", y="y", size="assists", color="dribbles",
                 hover_data=["player_name", "position", "dribbles", "assists", "jersey_number", "age"],
                 text="player_name", color_continuous_scale="Reds")

fig.update_layout(
    images=[dict(
        source=saha_url,
        xref="x", yref="y",
        x=0, y=70,
        sizex=100, sizey=70,
        sizing="stretch",
        opacity=0.9,
        layer="below"
    )],
    xaxis=dict(range=[0, 100], showgrid=False, zeroline=False, showticklabels=False),
    yaxis=dict(range=[0, 70], showgrid=False, zeroline=False, showticklabels=False),
    width=1000, height=700,
    title="Interactive Football Field (With Jersey Number and Age)",
    showlegend=True
)


for (p1, p2), count in paslar.items():
    x1, y1 = df[df["player_name"] == p1][["x", "y"]].values[0]
    x2, y2 = df[df["player_name"] == p2][["x", "y"]].values[0]
    fig.add_trace(go.Scatter(x=[x1, x2], y=[y1, y2], mode="lines",
                            line=dict(width=count*0.3, color="blue"),
                            opacity=0.5, showlegend=False,
                            hoverinfo="text", text=f"{p1} → {p2}: {count} pas"))


fig.update_traces(textposition='top center', textfont=dict(size=10, color="white"))


fig.write_html("halisaha_interaktif_gelismis.html")
fig.show(renderer='iframe_connected')

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import Normalize
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import seaborn as sns
import urllib.request
from PIL import Image
import io
import plotly.express as px
import plotly.graph_objects as go


data = {
    "player_name": ["Manuel Neuer", "Virgil van Dijk", "Sergio Ramos", "Angelino", "Trent Alexander-Arnold",
                    "N'Golo Kanté", "Luka Modrić", "Kevin De Bruyne", "Hakim Ziyech", "Antoine Griezmann", "Karim Benzema"],
    "position": ["Goalkeeper", "Defender", "Defender", "Defender", "Defender",
                 "Midfielder", "Midfielder", "Midfielder", "Forward", "Forward", "Forward"],
    "dribbles": [5, 10, 15, 20, 25, 30, 25, 40, 45, 35, 50],
    "assists": [2, 5, 3, 8, 12, 6, 10, 15, 10, 12, 8],
    "photo_url": [
         "neuer.png",
        "djk.png",
        "ramos.png",
        "angelino.png",
        "arnold.png",
        "kante.png",
        "modric.png",
        "debruyne.png",
        "zyech.png",
        "griezman.png",
        "benzema1.png"
    ],
    "jersey_number": [1, 4, 4, 3, 66, 7, 10, 17, 22, 7, 9],
    "age": [39, 34, 39, 28, 27, 34, 37, 34, 32, 34, 37]
}
df = pd.DataFrame(data)


def assign_position(player_name):
    if player_name == "Manuel Neuer":
        return 5, 35
    elif player_name == "Virgil van Dijk":
        return 19, 30
    elif player_name == "Sergio Ramos":
        return 19, 40
    elif player_name == "Angelino":
        return 20, 55
    elif player_name == "Trent Alexander-Arnold":
        return 20, 15
    elif player_name == "N'Golo Kanté":
        return 40, 29
    elif player_name == "Luka Modrić":
        return 40, 41
    elif player_name == "Kevin De Bruyne":
        return 58, 35
    elif player_name == "Hakim Ziyech":
        return 75, 55
    elif player_name == "Antoine Griezmann":
        return 75, 15
    elif player_name == "Karim Benzema":
        return 85, 35
    return 50, 35

df["x"], df["y"] = zip(*df["player_name"].apply(assign_position))



def add_field_background(ax):
    file_path = "saha1.png"
    try:
        img = Image.open(file_path)
        img = np.array(img.convert('RGB'))
        ax.imshow(img, extent=[0, 100, 0, 70], aspect='auto', alpha=0.9)
    except Exception as e:
        print(f"Kaggle saha görseli yüklenemedi: {e}")

        try:
            with urllib.request.urlopen(url) as response:
                img = Image.open(io.BytesIO(response.read()))
            img = np.array(img.convert('RGB'))
            ax.imshow(img, extent=[0, 100, 0, 70], aspect='auto', alpha=0.9)
        except Exception as e2:
            print(f"URL saha görseli yüklenemedi: {e2}")
            ax.add_patch(plt.Rectangle((0, 0), 100, 70, facecolor='forestgreen', edgecolor='white', lw=2))
            ax.plot([50, 50], [0, 70], 'w--', lw=2)
            ax.add_patch(plt.Rectangle((0, 20), 10, 30, facecolor='none', edgecolor='white', lw=2))
            ax.add_patch(plt.Rectangle((90, 20), 10, 30, facecolor='none', edgecolor='white', lw=2))
            ax.add_patch(plt.Circle((50, 35), 10, facecolor='none', edgecolor='white', lw=2))
    return ax


def add_player_photo(ax, x, y, photo_url, zoom=0.08):
    try:
        if photo_url.startswith("http"):
            with urllib.request.urlopen(photo_url) as response:
                img = Image.open(io.BytesIO(response.read()))
        else:
            img = Image.open(photo_url)
        img = img.convert('RGBA')
        imagebox = OffsetImage(img, zoom=zoom)
        ab = AnnotationBbox(imagebox, (x, y), frameon=False)
        ax.add_artist(ab)
    except Exception as e:
        print(f"Fotoğraf yüklenemedi: {photo_url}, hata: {e}")


paslar = {
    ("Kevin De Bruyne", "Karim Benzema"): 10,
    ("Kevin De Bruyne", "Hakim Ziyech"): 8,
    ("Luka Modrić", "N'Golo Kanté"): 6,
    ("Hakim Ziyech", "Karim Benzema"): 5,
    ("Antoine Griezmann", "Karim Benzema"): 4,
    ("Angelino", "Antoine Griezmann"): 3,
    ("Trent Alexander-Arnold", "Hakim Ziyech"): 3,
    ("N'Golo Kanté", "Kevin De Bruyne"): 7
}


plt.figure(figsize=(15, 10))
ax = plt.gca()
ax.set_xlim(0, 100)
ax.set_ylim(0, 70)
ax.axis('off')


add_field_background(ax)


for _, row in df.iterrows():
    x = np.random.normal(row["x"], 5, 100)
    y = np.random.normal(row["y"], 5, 100)
    sns.kdeplot(x=x, y=y, ax=ax, cmap="YlOrRd", alpha=0.3, levels=5, thresh=0.1)


for (p1, p2), count in paslar.items():
    x1, y1 = df[df["player_name"] == p1][["x", "y"]].values[0]
    x2, y2 = df[df["player_name"] == p2][["x", "y"]].values[0]
    ax.plot([x1, x2], [y1, y2], 'b-', lw=count*0.3, alpha=0.5)


norm = Normalize(vmin=df["dribbles"].min(), vmax=df["dribbles"].max())
cmap = plt.cm.Reds
scalar_map = plt.cm.ScalarMappable(norm=norm, cmap=cmap)


for i, row in df.iterrows():
    color = scalar_map.to_rgba(row["dribbles"])
    size = max(50, row["assists"] * 10)
    ax.scatter(row["x"], row["y"], s=size, color=color, alpha=0.8, edgecolors='k')
    add_player_photo(ax, row["x"], row["y"] + 3, row["photo_url"], zoom=0.08)
    ax.text(row["x"], row["y"] - 2, f"{row['player_name']} ({row['jersey_number']})",
            ha='center', va='top', fontsize=8, fontweight='bold', color='white')
    ax.text(row["x"], row["y"] - 4, row["position"],
            ha='center', va='top', fontsize=6, color='lightgray')


de_bruyne_pos = df[df["player_name"] == "Kevin De Bruyne"][["x", "y"]].values[0]
benzema_pos = df[df["player_name"] == "Karim Benzema"][["x", "y"]].values[0]
goal_pos = [95, 35]


ax.annotate("", xy=benzema_pos, xytext=de_bruyne_pos,
            arrowprops=dict(arrowstyle="->", color="green", lw=2))
ax.text((de_bruyne_pos[0] + benzema_pos[0])/2, (de_bruyne_pos[1] + benzema_pos[1])/2 + 2,
        "Pas!", fontsize=10, color="green", fontweight="bold")


ax.annotate("", xy=goal_pos, xytext=benzema_pos,
            arrowprops=dict(arrowstyle="->", color="red", lw=2))
ax.text((benzema_pos[0] + goal_pos[0])/2, (benzema_pos[1] + goal_pos[1])/2 + 2,
        "Gol!", fontsize=10, color="red", fontweight="bold")


ax.scatter(benzema_pos[0], benzema_pos[1], s=20, c="white", edgecolors="black", zorder=10)


cbar = plt.colorbar(scalar_map, ax=ax, orientation='horizontal', pad=0.05, shrink=0.5)
cbar.set_label("Dribbles", fontsize=10)
cbar.ax.tick_params(labelsize=8)


plt.title("Player Distribution on the Football Field\n(Passing Network, Heat Map and Goal Simulation)", fontsize=14, pad=20)
plt.tight_layout()
plt.savefig("halisaha_simulasyon.png", dpi=300, bbox_inches='tight', facecolor='white')
plt.show()

import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from PIL import Image
import numpy as np
import requests
from io import BytesIO


player_data = [
    {"name": "Manuel Neuer", "age": 39, "market_value": "€5M", "contract": "2024", "goals": 0, "assists": 1, "matches": 30, "position": "Goalkeeper", "club": "Bayern Munich", "photo_url": "neuer.png"},
    {"name": "Virgil van Dijk", "age": 34, "market_value": "€30M", "contract": "2025", "goals": 3, "assists": 2, "matches": 35, "position": "Defender", "club": "Liverpool", "photo_url": "djk.png"},
    {"name": "Sergio Ramos", "age": 39, "market_value": "€4M", "contract": "2023", "goals": 5, "assists": 1, "matches": 28, "position": "Defender", "club": "Sevilla", "photo_url": "ramos.png"},
    {"name": "Angelino", "age": 28, "market_value": "€10M", "contract": "2024", "goals": 2, "assists": 6, "matches": 32, "position": "Defender", "club": "Roma", "photo_url": "angelino.png"},
    {"name": "Trent Alexander-Arnold", "age": 27, "market_value": "€70M", "contract": "2025", "goals": 3, "assists": 10, "matches": 36, "position": "Defender", "club": "Liverpool", "photo_url": "arnold.png"},
    {"name": "N'Golo Kanté", "age": 34, "market_value": "€15M", "contract": "2024", "goals": 1, "assists": 3, "matches": 30, "position": "Midfielder", "club": "Al-Ittihad", "photo_url": "kante.png"},
    {"name": "Luka Modrić", "age": 37, "market_value": "€8M", "contract": "2023", "goals": 4, "assists": 7, "matches": 34, "position": "Midfielder", "club": "Real Madrid", "photo_url": "modric.png"},
    {"name": "Kevin De Bruyne", "age": 34, "market_value": "€50M", "contract": "2025", "goals": 8, "assists": 15, "matches": 35, "position": "Midfielder", "club": "Manchester City", "photo_url": "debruyne.png"},
    {"name": "Hakim Ziyech", "age": 32, "market_value": "€12M", "contract": "2024", "goals": 6, "assists": 8, "matches": 28, "position": "Forward", "club": "Galatasaray", "photo_url": "zyech.png"},
    {"name": "Antoine Griezmann", "age": 34, "market_value": "€25M", "contract": "2024", "goals": 14, "assists": 10, "matches": 36, "position": "Forward", "club": "Atlético Madrid", "photo_url": "griezman.png"},
    {"name": "Karim Benzema", "age": 37, "market_value": "€15M", "contract": "2024", "goals": 20, "assists": 8, "matches": 34, "position": "Forward", "club": "Al-Ittihad", "photo_url": "benzema1.png"}
]


def load_player_image(photo_url):
    try:
        if photo_url.startswith("http"):
            response = requests.get(photo_url)
            img = Image.open(BytesIO(response.content))
        else:
            img = Image.open(photo_url)
        width, height = img.size
        crop_size = min(width, height)
        left = (width - crop_size) / 2
        top = (height - crop_size) / 2
        right = (width + crop_size) / 2
        bottom = (height + crop_size) / 2
        img = img.crop((left, top, right, bottom))
        img = img.resize((200, 200), Image.LANCZOS)
        return img
    except Exception as e:
        print(f"Fotoğraf yüklenemedi: {photo_url}, hata: {e}")
        return Image.fromarray(np.zeros((200, 200, 3), dtype=np.uint8))


def draw_player_card(ax, player, x_offset=0.45):
    # ... (Rest of your existing function remains the same)

    # Adjust the x_offset for shifting the text to the right by 1 cm (0.3937 inches)
    x_offset += 0.3937

    photo = load_player_image(player["photo_url"])
    imagebox = OffsetImage(photo, zoom=0.8)
    ab = AnnotationBbox(imagebox, (0.2, 0.5), frameon=False, box_alignment=(0, 0.5))
    ax.add_artist(ab)

    ax.text(x_offset + 0.03, 0.9, f"{player['name']} ({player['age']})", fontsize=10, color='#f5f5f5')
    ax.text(x_offset + 0.03, 0.75, 'MARKET VALUE', fontsize=8, color='#aaaaaa')
    ax.text(x_offset + 0.03, 0.7, player['market_value'], fontsize=10, color='#ffd700', fontweight='bold')
    ax.text(x_offset + 0.03, 0.6, 'CONTRACT END', fontsize=8, color='#aaaaaa')
    ax.text(x_offset + 0.03, 0.55, player['contract'], fontsize=10, color='#ff5555', fontweight='bold')

    stats_y = 0.4
    stat_color = '#55ff55'
    ax.text(x_offset + 0.03, stats_y, 'SEASON STATS', fontsize=8, color='#aaaaaa')
    ax.text(x_offset + 0.03, stats_y-0.08, f"GOALS: {player['goals']}", fontsize=9, color=stat_color)
    ax.text(x_offset + 0.03, stats_y-0.16, f"ASSISTS: {player['assists']}", fontsize=9, color=stat_color)
    ax.text(x_offset + 0.03, stats_y-0.24, f"MATCHES: {player['matches']}", fontsize=9, color=stat_color)

    ax.text(x_offset + 0.03, 0.1, f"{player['position']} | {player['club']}", fontsize=8, color='#aaaaaa')

    ax.axis('off')


fig = plt.figure(figsize=(20, 12), facecolor='#0a0a0a')
fig.patch.set_facecolor('#0a0a0a')


x_offset = 0.45

# Satırlara 3 oyuncu ekleme
for i, player in enumerate(player_data):
    row = i // 3
    col = i % 3
    ax = fig.add_subplot(4, 3, i+1, facecolor='#0a0a0a')


    if player['name'] in ['Manuel Neuer', 'Angelino', 'Luka Modrić', 'Antoine Griezmann']:
        x_offset_adjusted = x_offset - 0.04
    else:
        x_offset_adjusted = x_offset

    draw_player_card(ax, player, x_offset=x_offset_adjusted)

plt.tight_layout()
plt.savefig("oyuncu_kartlari_yeni.png", dpi=300, bbox_inches='tight', facecolor='#0a0a0a')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from PIL import Image
import numpy as np
import ipywidgets as widgets
from IPython.display import display

# Örnek veri çerçevesi oluşturma
data = {
    'player_name': ['Bruno Fernandes', 'Cristiano Ronaldo', 'Lionel Messi'],
    'club': ['Manchester United', 'Al-Nassr', 'Paris Saint-Germain'],
    'position': ['Midfielder', 'Forward', 'Forward'],
    'assists': [10, 5, 8],
    'dribbles': [50, 25, 40],
    'match_played': [30, 25, 28],
    'corner_taken': [20, 5, 10],
    'offsides': [1, 2, 1]
}


df = pd.DataFrame(data)

def create_placeholder_image():
    return Image.fromarray(np.zeros((300, 300, 3), dtype=np.uint8))

def create_player_card(player_name, age, market_value, contract_year):
    try:
        player = df[df['player_name'] == player_name].iloc[0]
    except:
        print("Oyuncu bulunamadı! Lütfen veri setindeki ismi kontrol edin.")
        return

    photo = create_placeholder_image()

    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(10, 6), facecolor='#0a0a0a')
    fig.patch.set_facecolor('#0a0a0a')
    ax.set_facecolor('#0a0a0a')

    imagebox = OffsetImage(photo, zoom=0.8)
    ab = AnnotationBbox(imagebox, (0.2, 0.5), frameon=False, box_alignment=(0, 0.5))
    ax.add_artist(ab)

    plt.text(0.45, 0.9, 'PLAYER CARD', fontsize=24, color='#f5f5f5', fontweight='bold')
    plt.text(0.45, 0.85, f"{player_name} ({age})", fontsize=18, color='#f5f5f5')
    plt.text(0.45, 0.78, f"{player['club']} | {player['position']}",
             fontsize=14, color='#aaaaaa')
    plt.text(0.45, 0.7, 'MARKET VALUE', fontsize=12, color='#aaaaaa')
    plt.text(0.45, 0.66, market_value, fontsize=18, color='#ffd700', fontweight='bold')
    plt.text(0.45, 0.6, 'CONTRACT ENDS', fontsize=12, color='#aaaaaa')
    plt.text(0.45, 0.56, contract_year, fontsize=18, color='#ff5555', fontweight='bold')

    stats_y = 0.48
    plt.text(0.45, stats_y, 'SEASON STATISTICS', fontsize=14, color='#aaaaaa')
    plt.text(0.45, stats_y-0.08, f"Assists: {player['assists']}",
             fontsize=14, color='#55ff55')
    plt.text(0.45, stats_y-0.16, f"Dribbles: {player['dribbles']}",
             fontsize=14, color='#55ff55')
    plt.text(0.45, stats_y-0.24, f"Matches: {player['match_played']}",
             fontsize=14, color='#55ff55')

    plt.text(0.7, stats_y-0.08, f"Corners: {player['corner_taken']}",
             fontsize=14, color='#55ff55')
    plt.text(0.7, stats_y-0.16, f"Offsides: {player['offsides']}",
             fontsize=14, color='#ff5555')

    ax.axis('off')

    plt.tight_layout()
    plt.show()


player_names = df['player_name'].unique()


name_dropdown = widgets.Dropdown(
    options=player_names,
    description='Futbolcu:',
    value=player_names[0]
)


age_slider = widgets.IntSlider(
    value=28,
    min=18,
    max=40,
    step=1,
    description='Yaş:'
)

value_dropdown = widgets.Dropdown(
    options=['€10M', '€20M', '€30M', '€40M', '€50M', '€60M+'],
    description='Değer:',
    value='€30M'
)

contract_dropdown = widgets.Dropdown(
    options=['2023', '2024', '2025', '2026'],
    description='Sözleşme:',
    value='2024'
)

create_button = widgets.Button(
    description='Kart Oluştur',
    button_style='success'
)


def on_button_click(b):
    clear_output(wait=True)
    display(name_dropdown, age_slider, value_dropdown, contract_dropdown, create_button)
    create_player_card(name_dropdown.value, age_slider.value,
                      value_dropdown.value, contract_dropdown.value)

create_button.on_click(on_button_click)

from IPython.display import clear_output
display(name_dropdown, age_slider, value_dropdown, contract_dropdown, create_button)